// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: author.sql

package sqlc

import (
	"context"
)

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthorByID = `-- name: GetAuthorByID :one
SELECT id, nick_name, email, password_hash, payments, projects, bio, link, profile_image_url, additional_info, created_at, "last-login", updated_at FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthorByID(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthorByID, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.NickName,
		&i.Email,
		&i.PasswordHash,
		&i.Payments,
		&i.Projects,
		&i.Bio,
		&i.Link,
		&i.ProfileImageUrl,
		&i.AdditionalInfo,
		&i.CreatedAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthorByName = `-- name: GetAuthorByName :one
SELECT id, nick_name, email, password_hash, payments, projects, bio, link, profile_image_url, additional_info, created_at, "last-login", updated_at FROM authors
WHERE nick_name = $1 LIMIT 1
`

func (q *Queries) GetAuthorByName(ctx context.Context, nickName string) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthorByName, nickName)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.NickName,
		&i.Email,
		&i.PasswordHash,
		&i.Payments,
		&i.Projects,
		&i.Bio,
		&i.Link,
		&i.ProfileImageUrl,
		&i.AdditionalInfo,
		&i.CreatedAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return i, err
}

const listAuthorID = `-- name: ListAuthorID :many
SELECT id, nick_name, email, password_hash, payments, projects, bio, link, profile_image_url, additional_info, created_at, "last-login", updated_at FROM authors
ORDER BY id
`

func (q *Queries) ListAuthorID(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.NickName,
			&i.Email,
			&i.PasswordHash,
			&i.Payments,
			&i.Projects,
			&i.Bio,
			&i.Link,
			&i.ProfileImageUrl,
			&i.AdditionalInfo,
			&i.CreatedAt,
			&i.LastLogin,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthorName = `-- name: ListAuthorName :many
SELECT id, nick_name, email, password_hash, payments, projects, bio, link, profile_image_url, additional_info, created_at, "last-login", updated_at FROM authors
ORDER BY nick_name
`

func (q *Queries) ListAuthorName(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthorName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.NickName,
			&i.Email,
			&i.PasswordHash,
			&i.Payments,
			&i.Projects,
			&i.Bio,
			&i.Link,
			&i.ProfileImageUrl,
			&i.AdditionalInfo,
			&i.CreatedAt,
			&i.LastLogin,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const signAuthor = `-- name: SignAuthor :one
INSERT INTO authors (
    nick_name, email, password_hash
) VALUES (
             $1, $2, $3
         )
RETURNING id, nick_name
`

type SignAuthorParams struct {
	NickName     string
	Email        string
	PasswordHash string
}

type SignAuthorRow struct {
	ID       int32
	NickName string
}

func (q *Queries) SignAuthor(ctx context.Context, arg SignAuthorParams) (SignAuthorRow, error) {
	row := q.db.QueryRow(ctx, signAuthor, arg.NickName, arg.Email, arg.PasswordHash)
	var i SignAuthorRow
	err := row.Scan(&i.ID, &i.NickName)
	return i, err
}

const signFullAuthor = `-- name: SignFullAuthor :one
insert into authors(
    nick_name, email,
    password_hash,
    payments, projects,
    bio, link,
    profile_image_url, additional_info
)
values (
           $1, $2, $3,$4,$5,$6,$7,$8,$9
       )
returning id, nick_name, email, password_hash, payments, projects, bio, link, profile_image_url, additional_info, created_at, "last-login", updated_at
`

type SignFullAuthorParams struct {
	NickName        string
	Email           string
	PasswordHash    string
	Payments        string
	Projects        []string
	Bio             string
	Link            string
	ProfileImageUrl string
	AdditionalInfo  []string
}

func (q *Queries) SignFullAuthor(ctx context.Context, arg SignFullAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, signFullAuthor,
		arg.NickName,
		arg.Email,
		arg.PasswordHash,
		arg.Payments,
		arg.Projects,
		arg.Bio,
		arg.Link,
		arg.ProfileImageUrl,
		arg.AdditionalInfo,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.NickName,
		&i.Email,
		&i.PasswordHash,
		&i.Payments,
		&i.Projects,
		&i.Bio,
		&i.Link,
		&i.ProfileImageUrl,
		&i.AdditionalInfo,
		&i.CreatedAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
set nick_name = $2,
    email = $3,
    password_hash = $4
WHERE id = $1
returning id,nick_name
`

type UpdateAuthorParams struct {
	ID           int32
	NickName     string
	Email        string
	PasswordHash string
}

type UpdateAuthorRow struct {
	ID       int32
	NickName string
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (UpdateAuthorRow, error) {
	row := q.db.QueryRow(ctx, updateAuthor,
		arg.ID,
		arg.NickName,
		arg.Email,
		arg.PasswordHash,
	)
	var i UpdateAuthorRow
	err := row.Scan(&i.ID, &i.NickName)
	return i, err
}

const updateAuthorFull = `-- name: UpdateAuthorFull :one
UPDATE authors
set nick_name = $2,
    email = $3,
    password_hash = $4,
    payments = $5,
    projects = $6,
    bio = $7,
    link = $8,
    profile_image_url = $9,
    additional_info = $10
WHERE id = $1
returning id,nick_name
`

type UpdateAuthorFullParams struct {
	ID              int32
	NickName        string
	Email           string
	PasswordHash    string
	Payments        string
	Projects        []string
	Bio             string
	Link            string
	ProfileImageUrl string
	AdditionalInfo  []string
}

type UpdateAuthorFullRow struct {
	ID       int32
	NickName string
}

func (q *Queries) UpdateAuthorFull(ctx context.Context, arg UpdateAuthorFullParams) (UpdateAuthorFullRow, error) {
	row := q.db.QueryRow(ctx, updateAuthorFull,
		arg.ID,
		arg.NickName,
		arg.Email,
		arg.PasswordHash,
		arg.Payments,
		arg.Projects,
		arg.Bio,
		arg.Link,
		arg.ProfileImageUrl,
		arg.AdditionalInfo,
	)
	var i UpdateAuthorFullRow
	err := row.Scan(&i.ID, &i.NickName)
	return i, err
}
