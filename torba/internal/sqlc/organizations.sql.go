// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: organizations.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrg = `-- name: CreateOrg :one
insert into organizations
(
    author_id, category, description, name,
    description, website, contact_email, logo_url,
    additional_info
) values ($1, $2,$3,$4,$5,$6,$7,$8,now())
returning org_id, author_id, name, category
`

type CreateOrgParams struct {
	AuthorID      int64
	Category      string
	Description   string
	Name          string
	Description_2 string
	Website       string
	ContactEmail  string
	LogoUrl       string
}

type CreateOrgRow struct {
	OrgID    int32
	AuthorID int64
	Name     string
	Category string
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (CreateOrgRow, error) {
	row := q.db.QueryRow(ctx, createOrg,
		arg.AuthorID,
		arg.Category,
		arg.Description,
		arg.Name,
		arg.Description_2,
		arg.Website,
		arg.ContactEmail,
		arg.LogoUrl,
	)
	var i CreateOrgRow
	err := row.Scan(
		&i.OrgID,
		&i.AuthorID,
		&i.Name,
		&i.Category,
	)
	return i, err
}

const deleteOrg = `-- name: DeleteOrg :exec
delete from organizations
where org_id = $1
returning org_id
`

func (q *Queries) DeleteOrg(ctx context.Context, orgID int32) error {
	_, err := q.db.Exec(ctx, deleteOrg, orgID)
	return err
}

const getOrgByAuthor = `-- name: GetOrgByAuthor :one
select org_id, author_id, category, name, description, website, contact_email, logo_url, additional_info, created_at, updated_at
from organizations
where author_id = $1
`

func (q *Queries) GetOrgByAuthor(ctx context.Context, authorID int64) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrgByAuthor, authorID)
	var i Organization
	err := row.Scan(
		&i.OrgID,
		&i.AuthorID,
		&i.Category,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.ContactEmail,
		&i.LogoUrl,
		&i.AdditionalInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrgByCategory = `-- name: GetOrgByCategory :one
select org_id, author_id, category, name, description, website, contact_email, logo_url, additional_info, created_at, updated_at
from organizations
where category = $1
`

func (q *Queries) GetOrgByCategory(ctx context.Context, category string) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrgByCategory, category)
	var i Organization
	err := row.Scan(
		&i.OrgID,
		&i.AuthorID,
		&i.Category,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.ContactEmail,
		&i.LogoUrl,
		&i.AdditionalInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrgByName = `-- name: GetOrgByName :one
select org_id, author_id, category, name, description, website, contact_email, logo_url, additional_info, created_at, updated_at
from organizations
where name = $1
`

func (q *Queries) GetOrgByName(ctx context.Context, name string) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrgByName, name)
	var i Organization
	err := row.Scan(
		&i.OrgID,
		&i.AuthorID,
		&i.Category,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.ContactEmail,
		&i.LogoUrl,
		&i.AdditionalInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrgAuthor = `-- name: ListOrgAuthor :many
select org_id, author_id, category, name, description, website, contact_email, logo_url, additional_info, created_at, updated_at from organizations
order by author_id
`

func (q *Queries) ListOrgAuthor(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrgAuthor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.OrgID,
			&i.AuthorID,
			&i.Category,
			&i.Name,
			&i.Description,
			&i.Website,
			&i.ContactEmail,
			&i.LogoUrl,
			&i.AdditionalInfo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrgCategory = `-- name: ListOrgCategory :many
select org_id, author_id, category, name, description, website, contact_email, logo_url, additional_info, created_at, updated_at from organizations
order by category
`

func (q *Queries) ListOrgCategory(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrgCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.OrgID,
			&i.AuthorID,
			&i.Category,
			&i.Name,
			&i.Description,
			&i.Website,
			&i.ContactEmail,
			&i.LogoUrl,
			&i.AdditionalInfo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrgID = `-- name: ListOrgID :many
select org_id, author_id, category, name, description, website, contact_email, logo_url, additional_info, created_at, updated_at from organizations
order by org_id
`

func (q *Queries) ListOrgID(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.OrgID,
			&i.AuthorID,
			&i.Category,
			&i.Name,
			&i.Description,
			&i.Website,
			&i.ContactEmail,
			&i.LogoUrl,
			&i.AdditionalInfo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newestOrg = `-- name: NewestOrg :many
SELECT org_id, name, category, created_at
FROM organizations
ORDER BY created_at DESC
LIMIT 10
`

type NewestOrgRow struct {
	OrgID     int32
	Name      string
	Category  string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) NewestOrg(ctx context.Context) ([]NewestOrgRow, error) {
	rows, err := q.db.Query(ctx, newestOrg)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NewestOrgRow
	for rows.Next() {
		var i NewestOrgRow
		if err := rows.Scan(
			&i.OrgID,
			&i.Name,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrg = `-- name: UpdateOrg :one
update organizations set
                    category = $2,
                    name = $3,
                    description = $4,
                    website = $5,
                    contact_email = $6,
                    logo_url = $7,
                    additional_info = $8,
                    updated_at = now()
where org_id = $1
returning org_id, author_id, category, name, description, website, contact_email, logo_url, additional_info, created_at, updated_at
`

type UpdateOrgParams struct {
	OrgID          int32
	Category       string
	Name           string
	Description    string
	Website        string
	ContactEmail   string
	LogoUrl        string
	AdditionalInfo string
}

func (q *Queries) UpdateOrg(ctx context.Context, arg UpdateOrgParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrg,
		arg.OrgID,
		arg.Category,
		arg.Name,
		arg.Description,
		arg.Website,
		arg.ContactEmail,
		arg.LogoUrl,
		arg.AdditionalInfo,
	)
	var i Organization
	err := row.Scan(
		&i.OrgID,
		&i.AuthorID,
		&i.Category,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.ContactEmail,
		&i.LogoUrl,
		&i.AdditionalInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
