// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, email, password_hash, profile_image_url, created_at
) VALUES (
             $1, $2, $3, $4, now()
         )
RETURNING user_id, username, email, password_hash, profile_image_url, created_at, last_login, updated_at
`

type CreateUserParams struct {
	Username        string
	Email           string
	PasswordHash    string
	ProfileImageUrl string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.ProfileImageUrl,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, username, email, password_hash, profile_image_url, created_at, last_login, updated_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT user_id, username, email, password_hash, profile_image_url, created_at, last_login, updated_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserID = `-- name: ListUserID :many
SELECT user_id, username, email, password_hash, profile_image_url, created_at, last_login, updated_at FROM users
ORDER BY user_id
`

func (q *Queries) ListUserID(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.ProfileImageUrl,
			&i.CreatedAt,
			&i.LastLogin,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserName = `-- name: ListUserName :many
SELECT user_id, username, email, password_hash, profile_image_url, created_at, last_login, updated_at FROM users
ORDER BY username
`

func (q *Queries) ListUserName(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUserName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.ProfileImageUrl,
			&i.CreatedAt,
			&i.LastLogin,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set username = $2,
    email = $3,
    password_hash = $4,
    profile_image_url = $5,
    updated_at = now()
WHERE user_id = $1
returning user_id, username, email, password_hash, profile_image_url, created_at, last_login, updated_at
`

type UpdateUserParams struct {
	UserID          int64
	Username        string
	Email           string
	PasswordHash    string
	ProfileImageUrl string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.ProfileImageUrl,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return i, err
}
